// Generated by CoffeeScript 1.4.0
(function() {
  var $, $window, Classification, Classifier, Subject, User, template, _base, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if ((_ref = window.app) == null) {
    window.app = {};
  }

  if ((_ref1 = (_base = window.app).controllers) == null) {
    _base.controllers = {};
  }

  $ = window.jQuery;

  template = app.views.Classifier;

  User = zooniverse.models.User;

  Subject = zooniverse.models.Subject;

  Classification = zooniverse.models.Classification;

  $window = $(window);

  window.data = function(points) {
    return $window.trigger("subject-data-load", [points]);
  };

  Classifier = (function() {

    Classifier.prototype.el = null;

    Classifier.prototype.tagName = "div";

    Classifier.prototype.className = "classifier";

    Classifier.prototype.svg = null;

    Classifier.prototype.path = null;

    Classifier.prototype.suspiciousCheckbox = null;

    Classifier.prototype.submitButton = null;

    Classifier.prototype.nextButton = null;

    Classifier.prototype.classification = null;

    function Classifier() {
      this.onClickNext = __bind(this.onClickNext, this);

      this.onClickSubmit = __bind(this.onClickSubmit, this);

      this.onChangeSuspicious = __bind(this.onChangeSuspicious, this);

      this.onNoMoreSubjects = __bind(this.onNoMoreSubjects, this);

      this.onSubjectDataLoad = __bind(this.onSubjectDataLoad, this);

      this.onSubjectSelect = __bind(this.onSubjectSelect, this);

      this.onGettingNextSubject = __bind(this.onGettingNextSubject, this);

      this.onUserChange = __bind(this.onUserChange, this);

      this.render = __bind(this.render, this);
      this.el = $(document.createElement(this.tagName));
      this.el.addClass("classifier");
      this.el.addClass("loading");
      this.el.append(template);
      this.el.on("change", "input[name='suspicious']", this.onChangeSuspicious);
      this.el.on("click", "button[name='submit']", this.onClickSubmit);
      this.el.on("click", "button[name='next']", this.onClickNext);
      User.on("change", this.onUserChange);
      Subject.on("get-next", this.onGettingNextSubject);
      Subject.on("select", this.onSubjectSelect);
      $window.on("subject-data-load", this.onSubjectDataLoad);
      Subject.on("no-more", this.onNoMoreSubjects);
      this.svg = this.el.find(".subject svg");
      this.path = this.el.find(".subject svg path");
      this.suspiciousCheckbox = this.el.find("input[name='suspicious']");
      this.submitButton = this.el.find("button[name='submit']");
      this.nextButton = this.el.find("button[name='next']");
    }

    Classifier.prototype.render = function() {
      return this.el.html(require("views/test"));
      /*
          @el.html """
            <div class="subject">
              <div class="loader">
                <strong>Loading...</strong>
              </div>
              <img src="#{Subject.current.location.standard}" style="max-width: 500px;" />
              <img src="#{Subject.current.location.contour}" style="max-width: 500px;" />
              <svg width="100%" height="100%">
                <path d="M0,0" fill="transparent" stroke="black" stroke-width="1" />
              </svg>
            </div>
      
            <div class="controls">
              <span class="classify">
                <label><input type="checkbox" name="suspicious" /> Suspicious!</label>
                <button name="submit">Submit</button>
              </span>
      
              <span class="move-on">
                <button name="next">Next</button>
              </span>
            </div>
          """
      */

    };

    Classifier.prototype.onUserChange = function() {
      return Subject.next();
    };

    Classifier.prototype.onGettingNextSubject = function() {
      this.suspiciousCheckbox.attr({
        disabled: true
      });
      this.submitButton.attr({
        disabled: true
      });
      this.nextButton.attr({
        disabled: true
      });
      return this.el.addClass("loading");
    };

    Classifier.prototype.onSubjectSelect = function() {
      this.classification = new Classification({
        subject: Subject.current
      });
      this.annotation = this.classification.annotate({
        suspicious: false
      });
      console.log(Subject.current.location.standard);
      console.log(Subject.current.location.contour);
      return this.render();
    };

    Classifier.prototype.onSubjectDataLoad = function(e, points) {
      var halfHeight, i, pathData, width, x, y, _i, _len, _ref2, _ref3;
      this.suspiciousCheckbox.attr({
        checked: false
      });
      this.suspiciousCheckbox.attr({
        disabled: false
      });
      this.submitButton.attr({
        disabled: false
      });
      width = this.svg.parent().width();
      halfHeight = this.svg.parent().height() / 2;
      pathData = "M0,0";
      _ref2 = points.slice(0, width);
      for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
        _ref3 = _ref2[i], x = _ref3[0], y = _ref3[1];
        pathData += "L" + i + "," + ((y * halfHeight) + halfHeight);
      }
      return this.path.attr({
        d: pathData
      });
    };

    Classifier.prototype.onNoMoreSubjects = function() {
      this.el.removeClass("loading");
      return alert("Great work: we\"re currently out of data! Try again later.");
    };

    Classifier.prototype.onChangeSuspicious = function() {
      this.classification.removeAnnotation(this.annotation);
      return this.annotation = this.classification.annotate({
        suspicious: !!this.suspiciousCheckbox.attr("checked")
      });
    };

    Classifier.prototype.onClickSubmit = function() {
      this.suspiciousCheckbox.attr({
        disabled: true
      });
      this.submitButton.attr({
        disabled: true
      });
      this.nextButton.attr({
        disabled: false
      });
      console.log("Sending classification", JSON.stringify(this.classification));
      return this.el.addClass("finished");
    };

    Classifier.prototype.onClickNext = function() {
      this.nextButton.attr({
        disabled: true
      });
      Subject.next();
      return this.el.removeClass("finished");
    };

    return Classifier;

  })();

  window.app.controllers.Classifier = Classifier;

}).call(this);
